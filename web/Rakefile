require "bundler"
Bundler.require(:default)

path = "#{Dir.pwd}/vendor/spreadsheet-0.6.5.2/lib"
$:.unshift(path) unless $:.include?(path)
require 'spreadsheet'

require 'lib/blackout'
require 'rspec/core/rake_task'

require 'typhoeus'
require 'json'
require 'cgi'
require 'digest/sha1'

JSON_BLACKOUT_FILE  = "output/blackout.json"
CONFIG              = YAML.parse_file("config/couch.yml").transform["config"].freeze

desc "Run all spec"
RSpec::Core::RakeTask.new do |t|
  t.pattern = 'spec/**/*_spec.rb'
end

# import data from excel file
task :import do
  blackout_data = Blackout::Utils.blackout_data
  File.open(JSON_BLACKOUT_FILE, 'w') {|f| f.write(blackout_data.to_json) }
end

# update tepco couch db data
task :sync do
  url           = "#{CONFIG["url"]}#{CONFIG["database"]}"

  # delete all old records
  puts "Fetch CouchDB data"
  response = Typhoeus::Request.get("#{url}/_design/api/_view/blackout", 
    :headers => {:"Content-Type" => "application/json"},
    :username => CONFIG["username"],
    :password => CONFIG["password"],
    :auth_method => :basic
  )  
  raw_data = JSON(response.body)
  couchdb = raw_data["rows"].collect do |row|
    row["value"]["_deleted"]  = true
    row["value"]
  end
  if couchdb.count > 0
    response = Typhoeus::Request.post("#{url}/_bulk_docs", 
          :body => {"docs" => couchdb }.to_json,
          :headers => {:"Content-Type" => "application/json"},
          :username => CONFIG["username"],
          :password => CONFIG["password"],
          :auth_method => :basic
        )
  end
  
  # upload data to CouchDB      
  puts "Update blackout data"
  data = Blackout::Utils.tepco_data
  response = Typhoeus::Request.post("#{url}/_bulk_docs", 
        :body => {"docs" => data }.to_json,
        :headers => {:"Content-Type" => "application/json"},
        :username => CONFIG["username"],
        :password => CONFIG["password"],
        :auth_method => :basic
      )

  if response
    result = JSON(response.body)
    begin
      result["docs"].each do |r|
        if r["error"]
          puts "ERROR,#{r["id"]},#{r["error"]},#{r["reason"]}"
        else
          puts "OK,#{r["id"]},#{r["rev"]}"
        end
      end
    rescue 
      puts "result = #{result.inspect}"
    end
  end
end

task :sync_time do
  time_data     = Blackout::Utils.blackout_time
  url           = "#{CONFIG["url"]}#{CONFIG["database"]}"
  
  puts "  cleanup records"
  response = Typhoeus::Request.get("#{url}/_design/api/_view/schedules", 
    :headers => {:"Content-Type" => "application/json"},
    :username => CONFIG["username"],
    :password => CONFIG["password"],
    :auth_method => :basic
  )
  date_data = JSON(response.body)  
  couchdb = date_data["rows"].collect do |row|
    row["value"]["_deleted"]  = true
    row["value"]
  end
  if couchdb.count > 0
    response = Typhoeus::Request.post("#{url}/_bulk_docs", 
          :body => {"docs" => couchdb }.to_json,
          :headers => {:"Content-Type" => "application/json"},
          :username => CONFIG["username"],
          :password => CONFIG["password"],
          :auth_method => :basic
        )
  end

  puts "  uploading records to db"
  response = Typhoeus::Request.post("#{url}/_bulk_docs", 
        :body => {"docs" => time_data }.to_json,
        :headers => {:"Content-Type" => "application/json"},
        :username => CONFIG["username"],
        :password => CONFIG["password"],
        :auth_method => :basic
      )
end


# clear db
task :clear do
  url           = "#{CONFIG["url"]}#{CONFIG["database"]}"

  # delete all old records
  puts "Fetch CouchDB data"
  response = Typhoeus::Request.get("#{url}/_design/api/_view/blackout", 
    :headers => {:"Content-Type" => "application/json"},
    :username => CONFIG["username"],
    :password => CONFIG["password"],
    :auth_method => :basic
  )  
  raw_data = JSON(response.body)
  couchdb = raw_data["rows"].collect do |row|
    row["value"]["_deleted"]  = true
    row["value"]
  end
  if couchdb.count > 0
    response = Typhoeus::Request.post("#{url}/_bulk_docs", 
          :body => {"docs" => couchdb }.to_json,
          :headers => {:"Content-Type" => "application/json"},
          :username => CONFIG["username"],
          :password => CONFIG["password"],
          :auth_method => :basic
        )
  end
end
